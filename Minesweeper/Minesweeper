namespace Minesweeper
{
    using System;
    using System.Collections.Generic;

    public class Minesweeper
    {
        public static void Main(string[] arguments)
        {
            string command = string.Empty;
            char[,] theField = CreateField();
            char[,] theBombs = AddBombs();
            int personalScore = 0;
            bool hitBomb = false;
            List<Score> champions = new List<Score>(6);
            int row = 0;
            int col = 0;
            bool isNewGame = true;
            const int MaxScore = 35;
            bool isWon = false;
            
            do
            {
                if (isNewGame)
                {
                    Console.WriteLine("Let's play Minesweeper! :) "); 
                    Console.WriteLine("Try your luck :) and find the cells without bombs or you will die :)"); 
                    Console.WriteLine("\n--------------------------------------"); 
                    Console.WriteLine("                 Menu:");
                    Console.WriteLine("----------------------------------------");
                    Console.WriteLine("'top' - show the rating"); 
                    Console.WriteLine("'restart' - start a new game"); 
                    Console.WriteLine("'exit' - exit the game"); 
                    Console.WriteLine("'4x7' - example for entering row and col");
                    Console.WriteLine("----------------------------------------"); 
                    DrawField(theField); 
                    isNewGame = false;
                }

                Console.Write("Enter row and col:");
                command = Console.ReadLine().Trim();
                if (command.Length >= 3)
                {
                    if (int.TryParse(command[0].ToString(), out row) &&
                        int.TryParse(command[2].ToString(), out col) &&
                        row <= theField.GetLength(0) && col <= theField.GetLength(1))
                    {
                        command = "turn";
                    }
                }
                
                switch (command)
                {
                    case "top":
                        GetRating(champions);
                        break;
                    case "restart":
                        theField = CreateField();
                        theBombs = AddBombs();
                        DrawField(theField);
                        hitBomb = false;
                        isNewGame = false;
                        break;
                    case "exit":
                        Console.WriteLine("Bye, bye, bye!");
                        break;
                    case "turn":
                        if (theBombs[row, col] != '*')
                        {
                            if (theBombs[row, col] == '-')
                            {
                                EnterSurroundingBombCount(theField, theBombs, row, col);
                                personalScore++;
                            }
                            
                            if (MaxScore == personalScore)
                            {
                                isWon = true;
                            }
                            else
                            {
                                DrawField(theField);
                            }
                        }
                        else
                        {
                            hitBomb = true;
                        }
                        
                        break;
                    default:
                        Console.WriteLine("\nError: Invalid command\n");
                        break;
                }
                
                if (hitBomb)
                {
                    DrawField(theBombs);
                    Console.Write("\nYou hit a bomb and you are dead. You should try Again ");
                    Console.Write("\nYour Score: {0} Enter your name: ", personalScore);
                    string name = Console.ReadLine();
                    Score playerScore = new Score(name, personalScore);
                    if (champions.Count < 5)
                    {
                        champions.Add(playerScore);
                    }
                    else
                    {
                        for (int index = 0; index < champions.Count; index++)
                        {
                            if (champions[index].Points < playerScore.Points)
                            {
                                champions.Insert(index, playerScore);
                                champions.RemoveAt(champions.Count - 1);
                                break;
                            }
                        }
                    }
                    
                    champions.Sort((Score firstPlayes, Score secondPlayer)
                        => secondPlayer.Name.CompareTo(firstPlayes.Name));
                    champions.Sort((Score firstPlayer, Score secondPlayer) 
                        => secondPlayer.Points.CompareTo(firstPlayer.Points));
                    GetRating(champions);
                    
                    theField = CreateField();
                    theBombs = AddBombs();
                    personalScore = 0;
                    hitBomb = false;
                    isNewGame = true;
                }
                
                if (isWon)
                {
                    Console.WriteLine("\nCongratulations ! Your score is: {0}.", MaxScore);
                    DrawField(theBombs);
                    Console.WriteLine("Enter your name: ");
                    string name = Console.ReadLine();
                    Score yourScore = new Score(name, personalScore);
                    champions.Add(yourScore);
                    GetRating(champions);
                    theField = CreateField();
                    theBombs = AddBombs();
                    personalScore = 0;
                    isWon = false;
                    isNewGame = true;
                }
            }
            while (command != "exit");
            Console.WriteLine("Made in Bulgaria!");
            Console.WriteLine("Press any key to continue . . .");
            Console.Read();
        }
        
        private static void GetRating(List<Score> champions)
        {
            Console.WriteLine("\nRaiting:");
            if (champions.Count > 0)
            {
                for (int index = 0; index < champions.Count; index++)
                {
                    Console.WriteLine("{0}. {1} --> {2} open cells", index + 1, champions[index].Name, champions[index].Points);
                }
                
                Console.WriteLine();
            }
            else
            {
                Console.WriteLine("Empty rating list :)\n");
            }
        }

        private static void EnterSurroundingBombCount(char[,] theField, char[,] theBomb, int row, int col)
        {
            char bombCount = GetBombCount(theBomb, row, col);
            theBomb[row, col] = bombCount;
            theField[row, col] = bombCount;
        }
        
        private static void DrawField(char[,] board)
        {
            int rowCount = board.GetLength(0);
            int colCount = board.GetLength(1);
            Console.WriteLine("\n    0 1 2 3 4 5 6 7 8 9");
            Console.WriteLine("   ---------------------");
            for (int row = 0; row < rowCount; row++)
            {
                Console.Write("{0} | ", row);
                for (int col = 0; col < colCount; col++)
                {
                    Console.Write(string.Format("{0} ", board[row, col]));
                }
                
                Console.Write("|");
                Console.WriteLine();
            }
            
            Console.WriteLine("   ---------------------\n");
        }
        
        private static char[,] CreateField()
        {
            int fieldRows = 5;
            int fieldColumns = 10;
            char[,] theField = new char[fieldRows, fieldColumns];
            for (int row = 0; row < fieldRows; row++)
            {
                for (int col = 0; col < fieldColumns; col++)
                {
                    theField[row, col] = '?';
                }
            }
            
            return theField;
        }
        
        private static char[,] AddBombs()
        {
            int fieldRows = 5;
            int fieldColumns = 10;
            char[,] bombField = new char[fieldRows, fieldColumns];
            
            for (int row = 0; row < fieldRows; row++)
            {
                for (int col = 0; col < fieldColumns; col++)
                {
                    bombField[row, col] = '-';
                }
            }
            
            List<int> bombMap = new List<int>();
            while (bombMap.Count < 15)
            {
                Random randomInteger = new Random();
                int randomLocation = randomInteger.Next(50);
                if (!bombMap.Contains(randomLocation))
                {
                    bombMap.Add(randomLocation);
                }
            }
            
            foreach (int bombLocation in bombMap)
            {
                int col = bombLocation / fieldColumns;
                int row = bombLocation % fieldColumns;
                if (row == 0 && bombLocation != 0)
                {
                    col--;
                    row = fieldColumns;
                }
                else
                {
                    row++;
                }
                
                bombField[col, row - 1] = '*';
            }
            
            return bombField;
        }
        
        private static char GetBombCount(char[,] bombField, int row, int col)
        {
            int bombCount = 0;
            int rowCount = bombField.GetLength(0);
            int colCount = bombField.GetLength(1);
            
            if (row - 1 >= 0)
            {
                if (bombField[row - 1, col] == '*')
                { 
                    bombCount++; 
                }
            }
            
            if (row + 1 < rowCount)
            {
                if (bombField[row + 1, col] == '*')
                { 
                    bombCount++; 
                }
            }
            
            if (col - 1 >= 0)
            {
                if (bombField[row, col - 1] == '*')
                { 
                    bombCount++;
                }
            }
            
            if (col + 1 < colCount)
            {
                if (bombField[row, col + 1] == '*')
                { 
                    bombCount++;
                }
            }
            
            if ((row - 1 >= 0) && (col - 1 >= 0))
            {
                if (bombField[row - 1, col - 1] == '*')
                { 
                    bombCount++; 
                }
            }
            
            if ((row - 1 >= 0) && (col + 1 < colCount))
            {
                if (bombField[row - 1, col + 1] == '*')
                { 
                    bombCount++; 
                }
            }
            
            if ((row + 1 < rowCount) && (col - 1 >= 0))
            {
                if (bombField[row + 1, col - 1] == '*')
                { 
                    bombCount++; 
                }
            }
            
            if ((row + 1 < rowCount) && (col + 1 < colCount))
            {
                if (bombField[row + 1, col + 1] == '*')
                { 
                    bombCount++; 
                }
            }
            
            return char.Parse(bombCount.ToString());
        }
    }
}
